<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/security/oauth2
						http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
						http://www.springframework.org/schema/security
						http://www.springframework.org/schema/security/spring-security-3.2.xsd
                        http://www.springframework.org/schema/mvc 
                        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 定义上下文返回的消息的国际化 -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basename" value="classpath:spring_messages_zh_CN" />
	</beans:bean>
	
	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	
	<http pattern="/login.html" security="none" />
	<http pattern="/validateCode.do" security="none"></http>
	<http pattern="/css/**" security="none"></http>
	<http pattern="/img/tag/*" security="none"></http>
	<http pattern="/js/*" security="none"></http>
	<http pattern="/pages/*" security="none"></http>
	<http pattern="/dwr/engine.js" security="none"></http>
	<http pattern="/dwr/util.js" security="none"></http>
	<http pattern="/oauth/token" create-session="stateless" 
		authentication-manager-ref="oauth2AuthenticationManager">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="oauth2AuthenticationEntryPoint" />
		<custom-filter ref="clientCredentialsTokenEndpointFilter"
			before="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	<http pattern="/tool/pc/*" create-session="never"
		entry-point-ref="oauth2AuthenticationEntryPoint"
		access-decision-manager-ref="oauth2AccessDecisionManager">
		<anonymous enabled="false" />
		 <intercept-url pattern="/tool/pc/*" access="IS_AUTHENTICATED_FULLY" />
		<!-- <intercept-url pattern="/tool/pc/*" access="ROLE_OUATH" /> -->
		<custom-filter ref="mobileResourceServer" before="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauth2AccessDeniedHandler" />
	</http>
	<!-- auto-config="true" -->
	<!-- <http auto-config="true">
		<intercept-url pattern="/json**" access="ROLE_ADMIN,ROLE_USER" /> 
			<intercept-url pattern="/admin**" access="ROLE_ADMIN" />
		<form-login login-page="/" default-target-url="/"
			authentication-failure-url="/?login=error" />

		<logout logout-success-url="/" />
	</http> -->
<!-- auto-config="true" -->
	<http use-expressions="true" entry-point-ref="authenticationProcessingFilterEntryPoint">
		<!-- 单用户登陆 -->
		<session-management>
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="true" />
		</session-management>

		<!-- 尝试访问没有权限的页面时跳转的页面 -->
		<access-denied-handler error-page="/accessDenied.do" />
		<!-- 登录前拦截，可以配置验证码等操作 -->
		<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER" />
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- 检测失效的sessionId,session超时时，定位到另外一个URL -->
		<session-management invalid-session-url="/sessionTimeOut.do" />

		<!--用户退出 -->
		<logout invalidate-session="true" logout-success-url="/login.do"
			logout-url="/logout.do" />
	</http>

	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="authenticationProvider">
			<!-- <password-encoder hash="md5"> <salt-source user-property="username"/> 
				</password-encoder>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select USERNAME,PASSWORD, ENABLED from qc_sys_user  where USERNAME  = ?"
				authorities-by-username-query="select v_user_person.user_name as username, qc_sys_authority.role_id as role from v_user_person INNER JOIN qc_sys_authority on qc_sys_authority.person_id= v_user_person.person_id where v_user_person.user_name = ?" /> 
				-->
		</authentication-provider>
	</authentication-manager>
	
	<!-- for spring oauth2 -->
	<!-- <beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
	 -->
	 
	<beans:bean id="tokenStore"
		class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore" >
		<beans:constructor-arg index="0" ref="dataSource"/>  
	</beans:bean>
	
	
	<beans:bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<beans:property name="tokenStore" ref="tokenStore" />
		<beans:property name="supportRefreshToken" value="true" />
	</beans:bean>

	<beans:bean id="clientDetailsService" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService"> 
		<beans:constructor-arg index="0" ref="dataSource"/> </beans:bean>
	
	<beans:bean id="oauth2ClientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<beans:constructor-arg ref="clientDetailsService" />
	</beans:bean>
	
	<authentication-manager id="oauth2AuthenticationManager">
		<authentication-provider user-service-ref="oauth2ClientDetailsUserService" />
	</authentication-manager>

	<oauth2:authorization-server
		client-details-service-ref="clientDetailsService" token-services-ref="tokenServices"
		user-approval-handler-ref="oauthUserApprovalHandler">
		<oauth2:authorization-code />
		<oauth2:implicit />
		<oauth2:refresh-token />
		<oauth2:client-credentials />
		<oauth2:password />
	</oauth2:authorization-server>

	<beans:bean id="oauth2AuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint" />

	<beans:bean id="oauth2AccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
	<beans:bean id="oauthUserApprovalHandler"
		class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler" />

	<beans:bean id="oauth2AccessDecisionManager"
		class="org.springframework.security.access.vote.UnanimousBased">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<beans:bean class="org.springframework.security.access.vote.RoleVoter" />
				<beans:bean
					class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	<oauth2:resource-server id="mobileResourceServer" resource-id="mobile-resource" token-services-ref="tokenServices" />
	
	<beans:bean id="clientCredentialsTokenEndpointFilter"
		class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<beans:property name="authenticationManager" ref="oauth2AuthenticationManager" />
	</beans:bean>
	
		<beans:bean id="authenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="hideUserNotFoundExceptions"
			value="false" />
		<beans:property name="userDetailsService" ref="qcSysUserServiceImpl" />
		<!-- <beans:property name="userCache" ref="userCache" /> -->
		<beans:property name="messageSource" ref="messageSource" />
		<beans:property name="passwordEncoder" ref="passwordEncode" />
		<beans:property name="saltSource" ref="saltSource" />
	</beans:bean>

	<!-- 配置密码加密类 -->
	<beans:bean id="passwordEncode"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<beans:bean id="saltSource"
		class="org.springframework.security.authentication.dao.ReflectionSaltSource">
		<beans:property name="userPropertyToUse" value="username" />
	</beans:bean>
	
	<!-- 登录验证器 -->
	<beans:bean id="loginFilter"
		class="com.chains.security.MyUsernamePasswordAuthenticationFilter">
		<beans:property name="filterProcessesUrl" value="/sys_user_login_form.do"></beans:property>
		<!-- 验证成功后的处理 -->
		<beans:property name="authenticationSuccessHandler"
			ref="successHandler"></beans:property>
		<!-- 验证失败后的处理 -->
		<beans:property name="authenticationFailureHandler"
			ref="failureHandler"></beans:property>
		<!-- 校验用户名及密码，并对用户授权 -->
		<beans:property name="authenticationManager" ref="authenticationManager"></beans:property>
	</beans:bean>

	<!-- 登录成功 -->
	<!-- <beans:bean id="successHandler"
		class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/index.do"></beans:property>
	</beans:bean>
 -->
 	<beans:bean id="successHandler"
		class="com.chains.security.LoginSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/index.do"></beans:property>
	</beans:bean>
	<!-- 登录失败 -->
	<beans:bean id="failureHandler"
		class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl" value="/login.do?authentication_error=2"></beans:property>
	</beans:bean>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="myFilter"
		class="com.chains.security.FilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.chains.security.UnitAccessDecisionManager" />

	<!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.chains.security.service.InvocationSecurityMetadataSource" init-method="loadResourceDefine">
		<beans:property name="qcSysAuthorityServiceImpl" ref="qcSysAuthorityServiceImpl"></beans:property>
		<beans:property name="qcSysBasicinfoServiceImpl" ref="qcSysBasicinfoServiceImpl"></beans:property>
		<beans:property name="qcSysResourceServiceImpl" ref="qcSysResourceServiceImpl"></beans:property>
	
	</beans:bean>
	
	<!-- 未登录的切入点 -->
	<beans:bean id="authenticationProcessingFilterEntryPoint"
		class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/login.do"></beans:property>
	</beans:bean>
</beans:beans>